{
    "sourceFile": "src/api/axios.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710226061642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710226061642,
            "name": "Commit-0",
            "content": "Y/*\r\n * @Author: Fleurxxx 984209872@qq.com\r\n * @Date: 2023-03-19 15:53:44\r\n * @LastEditors: Fleurxxx 984209872@qq.com\r\n * @LastEditTime: 2023-04-05 00:35:58\r\n * @FilePath: \\OSS\\src\\utils\\axios.js\r\n * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\r\n */\r\nimport axios from 'axios'\r\nimport qs from 'qs';//转json数据工具包\r\nimport { ElMessage } from 'element-plus'\r\nimport router from '../router/index'\r\nimport { localGet } from './index'\r\nimport user from \"../store/user\";\r\nconst userStore = user()\r\n\r\n\r\nlet baseURL = 'http://192.168.50.236:8080/'\r\n// let baseURL = 'http://192.168.50.35:8080/' //后端开发环境地址(部署后端到本机后只需修改此地址)\r\nlet config = {\r\n  baseURL: baseURL,\r\n  timeout: 30000    //设置最大请求时间\r\n}\r\nconst _axios = axios.create(config);\r\n\r\n\r\n// 接收请求拦截器，内部根据返回值，重新组装，统一管理。\r\n_axios.interceptors.response.use(res => {\r\n  if (typeof res.data !== 'object') {\r\n    ElMessage.error('服务端异常！')\r\n    return Promise.reject(res)\r\n  }\r\n  if (res.data.code != 200) {\r\n    console.log(res.data);\r\n    if (res.data.msg) ElMessage.error(res.data.msg)\r\n    if (res.data.resultCode == 419) {\r\n      router.push({ path: '/login' })\r\n    }\r\n    return Promise.reject(res.data)\r\n  }\r\n  return res\r\n})\r\n\r\nconst header = { \r\n  'Content-Type': 'application/json;charset=UTF-8', \r\n  'Authorization': 'eyJ0eXBlIjoiSnd0IiwiYWxnIjoiSFMyNTYiLCJ0eXAiOiJKV1QifQ.eyJjdXJyZW50VGltZSI6MTY4MDM0ODgyNTQ1OCwicGFzc3dvcmQiOiIxIiwiaWQiOiIzIiwiZXhwIjoxNjgwMzQ4ODI1LCJ1c2VybmFtZSI6IjEifQ.HqPFNUcdYXmZ7JAtA9y_cXKFmFh1djEppriXDJUOGa4' \r\n}\r\n\r\n// const header = { \r\n//   'Content-Type': 'application/json;charset=UTF-8', \r\n//   'Authorization':localGet(\"token\")\r\n// }\r\n\r\n\r\n// 封装filePost,post,get,post,delete方法\r\nconst http = {\r\n  filePost(url = '', ip = '', port = '') {\r\n    let config2 = {\r\n      baseURL: \"http://\" + ip + \":\" + port + \"/\",\r\n      timeout: 30000\r\n    }\r\n    const _axios2 = axios.create(config2);\r\n    console.log(\"Aaa:\" + config2.baseURL)\r\n    return new Promise((resolve, reject) => {\r\n      _axios2({\r\n        url,\r\n        headers: { 'Content-Type': 'application/json;charset=UTF-8' },\r\n        method: 'POST'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res\r\n      }).catch(err => {\r\n        reject(err)\r\n      })\r\n    })\r\n  },\r\n  get(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        params,\r\n        headers: header,\r\n        method: 'GET'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res\r\n      }).catch(err => {\r\n        reject(err)\r\n      })\r\n    })\r\n  },\r\n  post(url = '', params = {}) {\r\n    console.log(\"测试打印post请求携带的params内容\", params)\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'POST'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  },\r\n  put(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'PUT'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  },\r\n  delete(url = '', params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      _axios({\r\n        url,\r\n        data: qs.parse(params),\r\n        headers: header,\r\n        method: 'DELETE'\r\n      }).then(res => {\r\n        resolve(res.data)\r\n        return res.data\r\n      }).catch(error => {\r\n        reject(error)\r\n      })\r\n    })\r\n  }\r\n}\r\nexport default http"
        }
    ]
}