{
    "sourceFile": "src/component/Aliplayer.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1710771423421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710772859707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,319 @@\n <template>\r\n     <div class='prism-player' :id='playerId' :style='playStyle'></div>\r\n   </template>\r\n   \r\n-  <script setup lang=\"ts\">\r\n-  import { ref, onMounted, onUnmounted, nextTick } from 'vue';\r\n+  <script>\r\n+    //查具体属性文档 https://help.aliyun.com/document_detail/125572.html?spm=a2c4g.11186623.6.1179.131d10e43Evs78\r\n+    export default {\r\n+      name: 'Aliplayer',\r\n+      props: {\r\n+        playStyle: {\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        aliplayerSdkPath: {\r\n+          // Aliplayer 代码的路径\r\n+          type: String,\r\n+          default: '//g.alicdn.com/de/prismplayer/2.9.3/aliplayer-min.js'\r\n+        },\r\n+        autoplay: {\r\n+          //播放器是否自动播放，在移动端autoplay属性会失效\r\n+          type: Boolean,\r\n+          default: true\r\n+        },\r\n+        isLive: {\r\n+          type: Boolean,\r\n+          default: true\r\n+        },\r\n+        playsinline: {\r\n+          type: Boolean,\r\n+          default: false\r\n+        },\r\n+        width: {\r\n+          type: String,\r\n+          default: '100%'\r\n+        },\r\n+        height: {\r\n+          type: String,\r\n+          default: '500px'\r\n+        },\r\n+        controlBarVisibility: {\r\n+          // 控制面板的实现，默认值为：hover。取值：\r\n+          // click：点击。\r\n+          // hover：停留。\r\n+          // always：一直。\r\n+          type: String,\r\n+          default: 'always'\r\n+        },\r\n+        useH5Prism: {\r\n+          type: Boolean,\r\n+          default: false\r\n+        },\r\n+        useFlashPrism: {\r\n+          type: Boolean,\r\n+          default: false\r\n+        },\r\n+        vid: {\r\n+          //媒体转码服务的媒体Id\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        playauth: {\r\n+          //播放权证\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        source: {\r\n+          //视频播放地址url\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        cover: {\r\n+          //播放器默认封面图片，请填写正确的图片url地址。需要autoplay值为false时，才生效\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        format: {\r\n+          //指定播放地址格式\r\n+          type: String,\r\n+          default: ''\r\n+        },\r\n+        x5_video_position: {\r\n+          type: String,\r\n+          default: 'top'\r\n+        },\r\n+        x5_type: {\r\n+          type: String,\r\n+          default: 'h5'\r\n+        },\r\n+        x5_fullscreen: {\r\n+          type: Boolean,\r\n+          default: false\r\n+        },\r\n+        x5_orientation: {\r\n+          type: Number,\r\n+          default: 2\r\n+        },\r\n+        autoPlayDelay: {\r\n+          type: Number,\r\n+          default: 0\r\n+        },\r\n+        autoPlayDelayDisplayText: {\r\n+          type: String\r\n+        }\r\n+      },\r\n+      data () {\r\n+        return {\r\n+          playerId: \"aliplayer_\" +\r\n+          Math.random().toString(36).substr(2),\r\n+          scriptTagStatus: 0,\r\n+          instance: null,\r\n+        }\r\n+      },\r\n+      created () {\r\n+        if (window.Aliplayer !== undefined) {\r\n+          // 如果全局对象存在，说明编辑器代码已经初始化完成，直接加载编辑器\r\n+          this.scriptTagStatus = 2\r\n+          this.initAliplayer()\r\n+        } else {\r\n+          // 如果全局对象不存在，说明编辑器代码还没有加载完成，需要加载编辑器代码\r\n+          this.insertScriptTag()\r\n+        }\r\n+      },\r\n+      mounted () {\r\n+        if (window.Aliplayer !== undefined) {\r\n+          // 如果全局对象存在，说明编辑器代码已经初始化完成，直接加载编辑器\r\n+          this.scriptTagStatus = 2\r\n+          this.initAliplayer()\r\n+        } else {\r\n+          // 如果全局对象不存在，说明编辑器代码还没有加载完成，需要加载编辑器代码\r\n+          this.insertScriptTag()\r\n+        }\r\n+      },\r\n+      methods: {\r\n+        insertScriptTag () {\r\n+          const _this = this\r\n+          let playerScriptTag = document.getElementById('playerScriptTag')\r\n+          // 如果这个tag不存在，则生成相关代码tag以加载代码\r\n+          if (playerScriptTag === null) {\r\n+            playerScriptTag = document.createElement('script')\r\n+            playerScriptTag.type = 'text/javascript'\r\n+            playerScriptTag.src = this.aliplayerSdkPath\r\n+            playerScriptTag.id = 'playerScriptTag'\r\n+            let s = document.getElementsByTagName('head')[0]\r\n+            s.appendChild(playerScriptTag)\r\n+          }\r\n+          if (playerScriptTag.loaded) {\r\n+            _this.scriptTagStatus++\r\n+          } else {\r\n+            playerScriptTag.addEventListener('load', () => {\r\n+              _this.scriptTagStatus++\r\n+              playerScriptTag.loaded = true\r\n+              _this.initAliplayer()\r\n+            })\r\n+          }\r\n+          _this.initAliplayer()\r\n+        },\r\n+        initAliplayer () {\r\n+          const _this = this\r\n+          // scriptTagStatus 为 2 的时候，说明两个必需引入的 js 文件都已经被引入，且加载完成\r\n+          if (_this.scriptTagStatus === 2 && _this.instance === null) {\r\n+            // Vue 异步执行 DOM 更新，这样一来代码执行到这里的时候可能 template 里面的 script 标签还没真正创建\r\n+            // 所以，我们只能在 nextTick 里面初始化 Aliplayer\r\n+            _this.$nextTick(() => {\r\n+              _this.instance = window.Aliplayer({\r\n+                id: _this.playerId,\r\n+                autoplay: _this.autoplay,\r\n+                isLive: _this.isLive,\r\n+                playsinline: _this.playsinline,\r\n+                format: _this.format,\r\n+                width: _this.width,\r\n+                height: _this.height,\r\n+                controlBarVisibility: _this.controlBarVisibility,\r\n+                useH5Prism: _this.useH5Prism,\r\n+                useFlashPrism: _this.useFlashPrism,\r\n+                vid: _this.vid,\r\n+                playauth: _this.playauth,\r\n+                source: _this.source,\r\n+                cover: _this.cover,\r\n+                x5_video_position: _this.x5_video_position,\r\n+                x5_type: _this.x5_type,\r\n+                x5_fullscreen: _this.x5_fullscreen,\r\n+                x5_orientation: _this.x5_orientation,\r\n+                autoPlayDelay: _this.autoPlayDelay,\r\n+                autoPlayDelayDisplayText: _this.autoPlayDelayDisplayText\r\n+              })\r\n+              // 绑定事件，当 AliPlayer 初始化完成后，将编辑器实例通过自定义的 ready 事件交出去\r\n+              _this.instance.on('ready', () => {\r\n+                this.$emit('ready', _this.instance)\r\n+              })\r\n+              _this.instance.on('play', () => {\r\n+                this.$emit('play', _this.instance)\r\n+              })\r\n+              _this.instance.on('pause', () => {\r\n+                this.$emit('pause', _this.instance)\r\n+              })\r\n+              _this.instance.on('ended', () => {\r\n+                this.$emit('ended', _this.instance)\r\n+              })\r\n+              _this.instance.on('liveStreamStop', () => {\r\n+                this.$emit('liveStreamStop', _this.instance)\r\n+              })\r\n+              _this.instance.on('m3u8Retry', () => {\r\n+                this.$emit('m3u8Retry', _this.instance)\r\n+              })\r\n+              _this.instance.on('hideBar', () => {\r\n+                this.$emit('hideBar', _this.instance)\r\n+              })\r\n+              _this.instance.on('waiting', () => {\r\n+                this.$emit('waiting', _this.instance)\r\n+              })\r\n+              _this.instance.on('snapshoted', () => {\r\n+                this.$emit('snapshoted', _this.instance)\r\n+              })\r\n+            })\r\n+          }\r\n+        },\r\n+        /**\r\n+         * 播放视频\r\n+         */\r\n+        play: function () {\r\n+          this.instance.play()\r\n+        },\r\n+        /**\r\n+         * 暂停视频\r\n+         */\r\n+        pause: function () {\r\n+          this.instance.pause()\r\n+        },\r\n+        /**\r\n+         * 重播视频\r\n+         */\r\n+        replay: function () {\r\n+          this.instance.replay()\r\n+        },\r\n+        /**\r\n+         * 跳转到某个时刻进行播放\r\n+         * @argument time 的单位为秒\r\n+         */\r\n+        seek: function (time) {\r\n+          this.instance.seek(time)\r\n+        },\r\n+        /**\r\n+         * 获取当前时间 单位秒\r\n+         */\r\n+        getCurrentTime: function () {\r\n+          return this.instance.getCurrentTime()\r\n+        },\r\n+        /**\r\n+         *获取视频总时长，返回的单位为秒\r\n+         * @returns 返回的单位为秒\r\n+         */\r\n+        getDuration: function () {\r\n+          return this.instance.getDuration()\r\n+        },\r\n+        /**\r\n+         获取当前的音量，返回值为0-1的实数ios和部分android会失效\r\n+         */\r\n+        getVolume: function () {\r\n+          return this.instance.getVolume()\r\n+        },\r\n+        /**\r\n+         设置音量，vol为0-1的实数，ios和部分android会失效\r\n+         */\r\n+        setVolume: function (vol) {\r\n+          this.instance.setVolume(vol)\r\n+        },\r\n+        /**\r\n+         *直接播放视频url，time为可选值（单位秒）目前只支持同种格式（mp4/flv/m3u8）之间切换暂不支持直播rtmp流切换\r\n+         *@argument url 视频地址\r\n+         *@argument time 跳转到多少秒\r\n+         */\r\n+        loadByUrl: function (url) {\r\n+          this.instance.loadByUrl(url)\r\n+        },\r\n+        /**\r\n+         * 直播流中断时触发。M3U8、FLV、RTMP在重试5次未成功后触发。提示上层流中断或需要重新加载视频。\r\n+         */\r\n+        liveStreamStop:function() {\r\n+          this.instance.liveStreamStop()\r\n+        },\r\n+        /**\r\n+         * M3U8直播流中断后重试事件，每次断流只触发一次。\r\n+         */\r\n+        m3u8Retry:function() {\r\n+          this.instance.m3u8Retry()\r\n+        },\r\n+        /**\r\n+         * 设置播放速度\r\n+         *@argument speed 速度\r\n+         */\r\n+        setSpeed: function (speed) {\r\n+          this.instance.setSpeed(speed)\r\n+        },\r\n+        /**\r\n+         * 设置播放器大小w,h可分别为400px像素或60%百分比chrome浏览器下flash播放器分别不能小于397x297\r\n+         *@argument w 播放器宽度\r\n+         *@argument h 播放器高度\r\n+         */\r\n+        setPlayerSize: function (w, h) {\r\n+          this.instance.setPlayerSize(w, h)\r\n+        },\r\n+        /**\r\n+         * 目前只支持HTML5界面上的重载功能,暂不支持直播rtmp流切换m3u8）之间切换,暂不支持直播rtmp流切换\r\n+         *@argument vid 视频id\r\n+         *@argument playauth 播放凭证\r\n+         */\r\n+        reloaduserPlayInfoAndVidRequestMts: function (vid, playauth) {\r\n+          this.instance.reloaduserPlayInfoAndVidRequestMts(vid, playauth)\r\n+        },\r\n   \r\n-  const playerId = 'aliplayer_' + Math.random() * 100000000000000000;\r\n-  const scriptTagStatus = ref(0);\r\n-  let instance = null;\r\n-  \r\n-  const insertScriptTag = () => {\r\n-    let playerScriptTag = document.getElementById('playerScriptTag');\r\n-    if (playerScriptTag === null) {\r\n-      playerScriptTag = document.createElement('script');\r\n-      playerScriptTag.type = 'text/javascript';\r\n-      playerScriptTag.src = aliplayerSdkPath;\r\n-      playerScriptTag.id = 'playerScriptTag';\r\n-      let s = document.getElementsByTagName('head')[0];\r\n-      s.appendChild(playerScriptTag);\r\n+      }\r\n     }\r\n-    if (playerScriptTag.loaded) {\r\n-      scriptTagStatus.value++;\r\n-    } else {\r\n-      playerScriptTag.addEventListener('load', () => {\r\n-        scriptTagStatus.value++;\r\n-        playerScriptTag.loaded = true;\r\n-        initAliplayer();\r\n-      });\r\n-    }\r\n-    initAliplayer();\r\n-  };\r\n-  \r\n-  const initAliplayer = () => {\r\n-    if (scriptTagStatus.value === 2 && instance === null) {\r\n-      nextTick(() => {\r\n-        instance = window.Aliplayer({\r\n-          id: playerId,\r\n-          autoplay: autoplay,\r\n-          isLive: isLive,\r\n-          playsinline: playsinline,\r\n-          format: format,\r\n-          width: width,\r\n-          height: height,\r\n-          controlBarVisibility: controlBarVisibility,\r\n-          useH5Prism: useH5Prism,\r\n-          useFlashPrism: useFlashPrism,\r\n-          vid: vid,\r\n-          playauth: playauth,\r\n-          source: source,\r\n-          cover: cover,\r\n-          x5_video_position: x5_video_position,\r\n-          x5_type: x5_type,\r\n-          x5_fullscreen: x5_fullscreen,\r\n-          x5_orientation: x5_orientation,\r\n-          autoPlayDelay: autoPlayDelay,\r\n-          autoPlayDelayDisplayText: autoPlayDelayDisplayText\r\n-        });\r\n-        instance.on('ready', () => {\r\n-          emit('ready', instance);\r\n-        });\r\n-        // Add other event listeners here\r\n-      });\r\n-    }\r\n-  };\r\n-  \r\n-  // Lifecycle hooks\r\n-  onMounted(() => {\r\n-    if (window.Aliplayer !== undefined) {\r\n-      scriptTagStatus.value = 2;\r\n-      initAliplayer();\r\n-    } else {\r\n-      insertScriptTag();\r\n-    }\r\n-  });\r\n-  \r\n-  onUnmounted(() => {\r\n-    // Clean up code if needed\r\n-  });\r\n   </script>\r\n   \r\n   <style>\r\n-  @import url(//g.alicdn.com/de/prismplayer/2.6.0/skins/default/aliplayer-min.css);\r\n+    @import url(//g.alicdn.com/de/prismplayer/2.9.3/skins/default/aliplayer-min.css);\r\n   </style>\r\n+  \r\n   \n\\ No newline at end of file\n"
                }
            ],
            "date": 1710771423421,
            "name": "Commit-0",
            "content": "<template>\r\n    <div class='prism-player' :id='playerId' :style='playStyle'></div>\r\n  </template>\r\n  \r\n  <script setup lang=\"ts\">\r\n  import { ref, onMounted, onUnmounted, nextTick } from 'vue';\r\n  \r\n  const playerId = 'aliplayer_' + Math.random() * 100000000000000000;\r\n  const scriptTagStatus = ref(0);\r\n  let instance = null;\r\n  \r\n  const insertScriptTag = () => {\r\n    let playerScriptTag = document.getElementById('playerScriptTag');\r\n    if (playerScriptTag === null) {\r\n      playerScriptTag = document.createElement('script');\r\n      playerScriptTag.type = 'text/javascript';\r\n      playerScriptTag.src = aliplayerSdkPath;\r\n      playerScriptTag.id = 'playerScriptTag';\r\n      let s = document.getElementsByTagName('head')[0];\r\n      s.appendChild(playerScriptTag);\r\n    }\r\n    if (playerScriptTag.loaded) {\r\n      scriptTagStatus.value++;\r\n    } else {\r\n      playerScriptTag.addEventListener('load', () => {\r\n        scriptTagStatus.value++;\r\n        playerScriptTag.loaded = true;\r\n        initAliplayer();\r\n      });\r\n    }\r\n    initAliplayer();\r\n  };\r\n  \r\n  const initAliplayer = () => {\r\n    if (scriptTagStatus.value === 2 && instance === null) {\r\n      nextTick(() => {\r\n        instance = window.Aliplayer({\r\n          id: playerId,\r\n          autoplay: autoplay,\r\n          isLive: isLive,\r\n          playsinline: playsinline,\r\n          format: format,\r\n          width: width,\r\n          height: height,\r\n          controlBarVisibility: controlBarVisibility,\r\n          useH5Prism: useH5Prism,\r\n          useFlashPrism: useFlashPrism,\r\n          vid: vid,\r\n          playauth: playauth,\r\n          source: source,\r\n          cover: cover,\r\n          x5_video_position: x5_video_position,\r\n          x5_type: x5_type,\r\n          x5_fullscreen: x5_fullscreen,\r\n          x5_orientation: x5_orientation,\r\n          autoPlayDelay: autoPlayDelay,\r\n          autoPlayDelayDisplayText: autoPlayDelayDisplayText\r\n        });\r\n        instance.on('ready', () => {\r\n          emit('ready', instance);\r\n        });\r\n        // Add other event listeners here\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Lifecycle hooks\r\n  onMounted(() => {\r\n    if (window.Aliplayer !== undefined) {\r\n      scriptTagStatus.value = 2;\r\n      initAliplayer();\r\n    } else {\r\n      insertScriptTag();\r\n    }\r\n  });\r\n  \r\n  onUnmounted(() => {\r\n    // Clean up code if needed\r\n  });\r\n  </script>\r\n  \r\n  <style>\r\n  @import url(//g.alicdn.com/de/prismplayer/2.6.0/skins/default/aliplayer-min.css);\r\n  </style>\r\n  "
        }
    ]
}